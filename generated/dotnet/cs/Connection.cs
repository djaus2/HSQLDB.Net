/*
 * Copyright (c) 1999-2018 by Codemesh, Inc.
 * ALL RIGHTS RESERVED.
 *
 * Original Java Type: java.sql.Connection
 * JRE Version       : 1.8.0_74
 * Template Version  : 1.0.42
 * Codegen Version   : 4.7.416
 * Generated at      : Sat Sep 29 22:36:15 EDT 2018
 */


namespace Java.Sql
{
    [global::System.Runtime.InteropServices.GuidAttribute("85E3E86A-D854-2795-E274-EEACF589631A")]
    [global::Codemesh.JuggerNET.JuggerNETProxyType(IsLeafType=false, CodegenVersion="4.7.416", JavaName="java.sql.Connection")]
    public interface Connection :
        global::Java.Sql.Wrapper,
        global::Java.Lang.AutoCloseable
    { 
        void Abort(global::Java.Util.Concurrent.Executor executor);
    
    
        void ClearWarnings();
    
    
        void Commit();
    
    
        global::Java.Sql.Array CreateArrayOf(string typeName, global::Java.Lang.ObjectArray elements);
    
    
        global::Java.Sql.Blob CreateBlob();
    
    
        global::Java.Sql.Clob CreateClob();
    
    
        global::Java.Sql.NClob CreateNClob();
    
    
        global::Java.Sql.SQLXML CreateSQLXML();
    
    
        global::Java.Sql.Statement CreateStatement();
    
    
        global::Java.Sql.Statement CreateStatement(int resultSetType, int resultSetConcurrency);
    
    
        global::Java.Sql.Statement CreateStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability);
    
    
        global::Java.Sql.Struct CreateStruct(string typeName, global::Java.Lang.ObjectArray attributes);
    
    
        bool GetAutoCommit();
    
    
        string GetCatalog();
    
    
        global::Java.Util.Properties GetClientInfo();
    
    
        string GetClientInfo(string name);
    
    
        int GetHoldability();
    
    
        global::Java.Sql.DatabaseMetaData GetMetaData();
    
    
        int GetNetworkTimeout();
    
    
        string GetSchema();
    
    
        int GetTransactionIsolation();
    
    
        global::Java.Util.Map GetTypeMap();
    
    
        global::Java.Sql.SQLWarning GetWarnings();
    
    
        bool IsClosed();
    
    
        bool IsReadOnly();
    
    
        bool IsValid(int timeout);
    
    
        string NativeSQL(string sql);
    
    
        global::Java.Sql.CallableStatement PrepareCall(string sql);
    
    
        global::Java.Sql.CallableStatement PrepareCall(string sql, int resultSetType, int resultSetConcurrency);
    
    
        global::Java.Sql.CallableStatement PrepareCall(string sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability);
    
    
        global::Java.Sql.PreparedStatement PrepareStatement(string sql);
    
    
        global::Java.Sql.PreparedStatement PrepareStatement(string sql, int autoGeneratedKeys);
    
    
        global::Java.Sql.PreparedStatement PrepareStatement(string sql, global::Codemesh.JuggerNET.intArray columnIndexes);
    
    
        global::Java.Sql.PreparedStatement PrepareStatement(string sql, global::Java.Lang.StringArray columnNames);
    
    
        global::Java.Sql.PreparedStatement PrepareStatement(string sql, int resultSetType, int resultSetConcurrency);
    
    
        global::Java.Sql.PreparedStatement PrepareStatement(string sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability);
    
    
        void ReleaseSavepoint(global::Java.Sql.Savepoint savepoint);
    
    
        void Rollback();
    
    
        void Rollback(global::Java.Sql.Savepoint savepoint);
    
    
        void SetAutoCommit(bool autoCommit);
    
    
        void SetCatalog(string catalog);
    
    
        void SetClientInfo(global::Java.Util.Properties properties);
    
    
        void SetClientInfo(string name, string value);
    
    
        void SetHoldability(int holdability);
    
    
        void SetNetworkTimeout(global::Java.Util.Concurrent.Executor executor, int milliseconds);
    
    
        void SetReadOnly(bool readOnly);
    
    
        global::Java.Sql.Savepoint SetSavepoint();
    
    
        global::Java.Sql.Savepoint SetSavepoint(string name);
    
    
        void SetSchema(string schema);
    
    
        void SetTransactionIsolation(int level);
    
    
        void SetTypeMap(global::Java.Util.Map map);
    }
    
    
    [global::Codemesh.JuggerNET.JuggerNETProxyType(IsLeafType=true, CodegenVersion="4.7.416", JavaName="java.sql.Connection")]
    public class ConnectionImpl :
        global::Java.Sql.WrapperImpl,
        global::Java.Sql.Connection
    {
        private static readonly global::Codemesh.JuggerNET.JavaClass    _cmj_theClass;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun0;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun1;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun2;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun3;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun4;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun5;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun6;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun7;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun8;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun9;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun10;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun11;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun12;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun13;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun14;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun15;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun16;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun17;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun18;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun19;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun20;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun21;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun22;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun23;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun24;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun25;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun26;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun27;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun28;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun29;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun30;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun31;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun32;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun33;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun34;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun35;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun36;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun37;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun38;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun39;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun40;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun41;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun42;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun43;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun44;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun45;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun46;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun47;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun48;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun49;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun50;
        private static readonly global::Codemesh.JuggerNET.JavaMethod   _cmj_fun51;
    
        static ConnectionImpl()
        {
            _cmj_theClass = global::Codemesh.JuggerNET.JavaClass.RegisterClass("java.sql.Connection", typeof(global::Java.Sql.Connection), typeof(global::Java.Sql.ConnectionImpl), null);
            _cmj_fun0 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(void), "abort", "(Ljava/util/concurrent/Executor;)V", false, false, false );
            _cmj_fun1 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(void), "clearWarnings", "()V", false, false, false );
            _cmj_fun2 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(void), "close", "()V", false, false, false );
            _cmj_fun3 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(void), "commit", "()V", false, false, false );
            _cmj_fun4 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(global::Java.Sql.Array), "createArrayOf", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/sql/Array;", false, false, false );
            _cmj_fun5 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(global::Java.Sql.Blob), "createBlob", "()Ljava/sql/Blob;", false, false, false );
            _cmj_fun6 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(global::Java.Sql.Clob), "createClob", "()Ljava/sql/Clob;", false, false, false );
            _cmj_fun7 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(global::Java.Sql.NClob), "createNClob", "()Ljava/sql/NClob;", false, false, false );
            _cmj_fun8 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(global::Java.Sql.SQLXML), "createSQLXML", "()Ljava/sql/SQLXML;", false, false, false );
            _cmj_fun9 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(global::Java.Sql.Statement), "createStatement", "()Ljava/sql/Statement;", false, false, false );
            _cmj_fun10 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(global::Java.Sql.Statement), "createStatement", "(II)Ljava/sql/Statement;", false, false, false );
            _cmj_fun11 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(global::Java.Sql.Statement), "createStatement", "(III)Ljava/sql/Statement;", false, false, false );
            _cmj_fun12 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(global::Java.Sql.Struct), "createStruct", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/sql/Struct;", false, false, false );
            _cmj_fun13 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(bool), "getAutoCommit", "()Z", false, false, false );
            _cmj_fun14 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(string), "getCatalog", "()Ljava/lang/String;", false, false, false );
            _cmj_fun15 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(global::Java.Util.Properties), "getClientInfo", "()Ljava/util/Properties;", false, false, false );
            _cmj_fun16 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(string), "getClientInfo", "(Ljava/lang/String;)Ljava/lang/String;", false, false, false );
            _cmj_fun17 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(int), "getHoldability", "()I", false, false, false );
            _cmj_fun18 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(global::Java.Sql.DatabaseMetaData), "getMetaData", "()Ljava/sql/DatabaseMetaData;", false, false, false );
            _cmj_fun19 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(int), "getNetworkTimeout", "()I", false, false, false );
            _cmj_fun20 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(string), "getSchema", "()Ljava/lang/String;", false, false, false );
            _cmj_fun21 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(int), "getTransactionIsolation", "()I", false, false, false );
            _cmj_fun22 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(global::Java.Util.Map), "getTypeMap", "()Ljava/util/Map;", false, false, false );
            _cmj_fun23 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(global::Java.Sql.SQLWarning), "getWarnings", "()Ljava/sql/SQLWarning;", false, false, false );
            _cmj_fun24 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(bool), "isClosed", "()Z", false, false, false );
            _cmj_fun25 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(bool), "isReadOnly", "()Z", false, false, false );
            _cmj_fun26 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(bool), "isValid", "(I)Z", false, false, false );
            _cmj_fun27 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(string), "nativeSQL", "(Ljava/lang/String;)Ljava/lang/String;", false, false, false );
            _cmj_fun28 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(global::Java.Sql.CallableStatement), "prepareCall", "(Ljava/lang/String;)Ljava/sql/CallableStatement;", false, false, false );
            _cmj_fun29 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(global::Java.Sql.CallableStatement), "prepareCall", "(Ljava/lang/String;II)Ljava/sql/CallableStatement;", false, false, false );
            _cmj_fun30 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(global::Java.Sql.CallableStatement), "prepareCall", "(Ljava/lang/String;III)Ljava/sql/CallableStatement;", false, false, false );
            _cmj_fun31 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(global::Java.Sql.PreparedStatement), "prepareStatement", "(Ljava/lang/String;)Ljava/sql/PreparedStatement;", false, false, false );
            _cmj_fun32 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(global::Java.Sql.PreparedStatement), "prepareStatement", "(Ljava/lang/String;I)Ljava/sql/PreparedStatement;", false, false, false );
            _cmj_fun33 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(global::Java.Sql.PreparedStatement), "prepareStatement", "(Ljava/lang/String;[I)Ljava/sql/PreparedStatement;", false, false, false );
            _cmj_fun34 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(global::Java.Sql.PreparedStatement), "prepareStatement", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/PreparedStatement;", false, false, false );
            _cmj_fun35 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(global::Java.Sql.PreparedStatement), "prepareStatement", "(Ljava/lang/String;II)Ljava/sql/PreparedStatement;", false, false, false );
            _cmj_fun36 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(global::Java.Sql.PreparedStatement), "prepareStatement", "(Ljava/lang/String;III)Ljava/sql/PreparedStatement;", false, false, false );
            _cmj_fun37 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(void), "releaseSavepoint", "(Ljava/sql/Savepoint;)V", false, false, false );
            _cmj_fun38 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(void), "rollback", "()V", false, false, false );
            _cmj_fun39 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(void), "rollback", "(Ljava/sql/Savepoint;)V", false, false, false );
            _cmj_fun40 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(void), "setAutoCommit", "(Z)V", false, false, false );
            _cmj_fun41 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(void), "setCatalog", "(Ljava/lang/String;)V", false, false, false );
            _cmj_fun42 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(void), "setClientInfo", "(Ljava/util/Properties;)V", false, false, false );
            _cmj_fun43 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(void), "setClientInfo", "(Ljava/lang/String;Ljava/lang/String;)V", false, false, false );
            _cmj_fun44 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(void), "setHoldability", "(I)V", false, false, false );
            _cmj_fun45 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(void), "setNetworkTimeout", "(Ljava/util/concurrent/Executor;I)V", false, false, false );
            _cmj_fun46 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(void), "setReadOnly", "(Z)V", false, false, false );
            _cmj_fun47 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(global::Java.Sql.Savepoint), "setSavepoint", "()Ljava/sql/Savepoint;", false, false, false );
            _cmj_fun48 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(global::Java.Sql.Savepoint), "setSavepoint", "(Ljava/lang/String;)Ljava/sql/Savepoint;", false, false, false );
            _cmj_fun49 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(void), "setSchema", "(Ljava/lang/String;)V", false, false, false );
            _cmj_fun50 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(void), "setTransactionIsolation", "(I)V", false, false, false );
            _cmj_fun51 = new global::Codemesh.JuggerNET.JavaMethod( _cmj_theClass, typeof(void), "setTypeMap", "(Ljava/util/Map;)V", false, false, false );
        }
    
        public const int        TRANSACTION_NONE = 0;
        public const int        TRANSACTION_READ_COMMITTED = 2;
        public const int        TRANSACTION_READ_UNCOMMITTED = 1;
        public const int        TRANSACTION_REPEATABLE_READ = 4;
        public const int        TRANSACTION_SERIALIZABLE = 8;
    
    
        /// <summary>Creates a .NET proxy instance from an existing JNI object handle.
        /// <para>You should never have to use this constructor explicitly. It is a
        /// constructor that is required by the JuggerNET framework.</para></summary>
        /// <param name="jobj"> The JNI object handle.</param>
        public ConnectionImpl( global::Codemesh.JuggerNET.JNIHandle jobj ) : base( jobj ) {	}
    
    
        /// <summary>Returns an instance of type ConnectionImpl if the given proxy instance
        /// represents a Java object that is type-compatible with java.sql.Connection</summary>
        /// <param name="proxy">A proxy object of any type.</param>
        public static new global::Java.Sql.ConnectionImpl From( object proxy )
        {
            global::Codemesh.JuggerNET.JavaProxy   jp = proxy as global::Codemesh.JuggerNET.JavaProxy;
            if (_cmj_theClass.IsTypeOf(jp))
                return new global::Java.Sql.ConnectionImpl(new global::Codemesh.JuggerNET.JNIHandle(jp.JObjectDuplicate));
            else
                return null;
        }
        
        public void Abort(global::Java.Util.Concurrent.Executor executor)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 1 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(executor) )
            {
                _cmj_fun0.CallVoid( this, cmj_jmargs );
            }
        }        
        
        public void ClearWarnings()
        {
            _cmj_fun1.CallVoid( this );
        }        
        
        public void Close()
        {
            _cmj_fun2.CallVoid( this );
        }        
        
        public void Commit()
        {
            _cmj_fun3.CallVoid( this );
        }        
        
        public global::Java.Sql.Array CreateArrayOf(string typeName, global::Java.Lang.ObjectArray elements)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 2 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(typeName).Add(elements) )
            {
                if(_cmj_fun4.IsLeafType)
                {
                    long    jnet_ref = (long)_cmj_fun4.CallObject( this, cmj_jmargs );
                    return  jnet_ref == 0 ? null : new global::Java.Sql.ArrayImpl( new global::Codemesh.JuggerNET.JNIHandle(jnet_ref) );
                }
                else
                    return (global::Java.Sql.Array)_cmj_fun4.CallObject( this, typeof(global::Java.Sql.Array), false, cmj_jmargs );
        
            }
        }        
        
        public global::Java.Sql.Blob CreateBlob()
        {
            if(_cmj_fun5.IsLeafType)
            {
                long    jnet_ref = (long)_cmj_fun5.CallObject( this );
                return  jnet_ref == 0 ? null : new global::Java.Sql.BlobImpl( new global::Codemesh.JuggerNET.JNIHandle(jnet_ref) );
            }
            else
                return (global::Java.Sql.Blob)_cmj_fun5.CallObject( this, typeof(global::Java.Sql.Blob), false );
        
        }        
        
        public global::Java.Sql.Clob CreateClob()
        {
            if(_cmj_fun6.IsLeafType)
            {
                long    jnet_ref = (long)_cmj_fun6.CallObject( this );
                return  jnet_ref == 0 ? null : new global::Java.Sql.ClobImpl( new global::Codemesh.JuggerNET.JNIHandle(jnet_ref) );
            }
            else
                return (global::Java.Sql.Clob)_cmj_fun6.CallObject( this, typeof(global::Java.Sql.Clob), false );
        
        }        
        
        public global::Java.Sql.NClob CreateNClob()
        {
            if(_cmj_fun7.IsLeafType)
            {
                long    jnet_ref = (long)_cmj_fun7.CallObject( this );
                return  jnet_ref == 0 ? null : new global::Java.Sql.NClobImpl( new global::Codemesh.JuggerNET.JNIHandle(jnet_ref) );
            }
            else
                return (global::Java.Sql.NClob)_cmj_fun7.CallObject( this, typeof(global::Java.Sql.NClob), false );
        
        }        
        
        public global::Java.Sql.SQLXML CreateSQLXML()
        {
            if(_cmj_fun8.IsLeafType)
            {
                long    jnet_ref = (long)_cmj_fun8.CallObject( this );
                return  jnet_ref == 0 ? null : new global::Java.Sql.SQLXMLImpl( new global::Codemesh.JuggerNET.JNIHandle(jnet_ref) );
            }
            else
                return (global::Java.Sql.SQLXML)_cmj_fun8.CallObject( this, typeof(global::Java.Sql.SQLXML), false );
        
        }        
        
        public global::Java.Sql.Statement CreateStatement()
        {
            if(_cmj_fun9.IsLeafType)
            {
                long    jnet_ref = (long)_cmj_fun9.CallObject( this );
                return  jnet_ref == 0 ? null : new global::Java.Sql.StatementImpl( new global::Codemesh.JuggerNET.JNIHandle(jnet_ref) );
            }
            else
                return (global::Java.Sql.Statement)_cmj_fun9.CallObject( this, typeof(global::Java.Sql.Statement), false );
        
        }        
        
        public global::Java.Sql.Statement CreateStatement(int resultSetType, int resultSetConcurrency)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 2 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(resultSetType).Add(resultSetConcurrency) )
            {
                if(_cmj_fun10.IsLeafType)
                {
                    long    jnet_ref = (long)_cmj_fun10.CallObject( this, cmj_jmargs );
                    return  jnet_ref == 0 ? null : new global::Java.Sql.StatementImpl( new global::Codemesh.JuggerNET.JNIHandle(jnet_ref) );
                }
                else
                    return (global::Java.Sql.Statement)_cmj_fun10.CallObject( this, typeof(global::Java.Sql.Statement), false, cmj_jmargs );
        
            }
        }        
        
        public global::Java.Sql.Statement CreateStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 3 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(resultSetType).Add(resultSetConcurrency).Add(resultSetHoldability) )
            {
                if(_cmj_fun11.IsLeafType)
                {
                    long    jnet_ref = (long)_cmj_fun11.CallObject( this, cmj_jmargs );
                    return  jnet_ref == 0 ? null : new global::Java.Sql.StatementImpl( new global::Codemesh.JuggerNET.JNIHandle(jnet_ref) );
                }
                else
                    return (global::Java.Sql.Statement)_cmj_fun11.CallObject( this, typeof(global::Java.Sql.Statement), false, cmj_jmargs );
        
            }
        }        
        
        public global::Java.Sql.Struct CreateStruct(string typeName, global::Java.Lang.ObjectArray attributes)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 2 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(typeName).Add(attributes) )
            {
                if(_cmj_fun12.IsLeafType)
                {
                    long    jnet_ref = (long)_cmj_fun12.CallObject( this, cmj_jmargs );
                    return  jnet_ref == 0 ? null : new global::Java.Sql.StructImpl( new global::Codemesh.JuggerNET.JNIHandle(jnet_ref) );
                }
                else
                    return (global::Java.Sql.Struct)_cmj_fun12.CallObject( this, typeof(global::Java.Sql.Struct), false, cmj_jmargs );
        
            }
        }        
        
        public bool GetAutoCommit()
        {
            return _cmj_fun13.CallBool( this );
        }        
        
        public string GetCatalog()
        {
            return _cmj_fun14.CallString( this );
        }        
        
        public global::Java.Util.Properties GetClientInfo()
        {
            if(_cmj_fun15.IsLeafType)
            {
                long    jnet_ref = (long)_cmj_fun15.CallObject( this );
                return  jnet_ref == 0 ? null : new global::Java.Util.Properties( new global::Codemesh.JuggerNET.JNIHandle(jnet_ref) );
            }
            else
                return (global::Java.Util.Properties)_cmj_fun15.CallObject( this, typeof(global::Java.Util.Properties), false );
        
        }        
        
        public string GetClientInfo(string name)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 1 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(name) )
            {
                return _cmj_fun16.CallString( this, cmj_jmargs );
            }
        }        
        
        public int GetHoldability()
        {
            return _cmj_fun17.CallInt( this );
        }        
        
        public global::Java.Sql.DatabaseMetaData GetMetaData()
        {
            if(_cmj_fun18.IsLeafType)
            {
                long    jnet_ref = (long)_cmj_fun18.CallObject( this );
                return  jnet_ref == 0 ? null : new global::Java.Sql.DatabaseMetaDataImpl( new global::Codemesh.JuggerNET.JNIHandle(jnet_ref) );
            }
            else
                return (global::Java.Sql.DatabaseMetaData)_cmj_fun18.CallObject( this, typeof(global::Java.Sql.DatabaseMetaData), false );
        
        }        
        
        public int GetNetworkTimeout()
        {
            return _cmj_fun19.CallInt( this );
        }        
        
        public string GetSchema()
        {
            return _cmj_fun20.CallString( this );
        }        
        
        public int GetTransactionIsolation()
        {
            return _cmj_fun21.CallInt( this );
        }        
        
        public global::Java.Util.Map GetTypeMap()
        {
            if(_cmj_fun22.IsLeafType)
            {
                long    jnet_ref = (long)_cmj_fun22.CallObject( this );
                return  jnet_ref == 0 ? null : new global::Java.Util.MapImpl( new global::Codemesh.JuggerNET.JNIHandle(jnet_ref) );
            }
            else
                return (global::Java.Util.Map)_cmj_fun22.CallObject( this, typeof(global::Java.Util.Map), false );
        
        }        
        
        public global::Java.Sql.SQLWarning GetWarnings()
        {
            if(_cmj_fun23.IsLeafType)
            {
                long    jnet_ref = (long)_cmj_fun23.CallObject( this );
                return  jnet_ref == 0 ? null : new global::Java.Sql.SQLWarning( new global::Codemesh.JuggerNET.JNIHandle(jnet_ref) );
            }
            else
                return (global::Java.Sql.SQLWarning)_cmj_fun23.CallObject( this, typeof(global::Java.Sql.SQLWarning), false );
        
        }        
        
        public bool IsClosed()
        {
            return _cmj_fun24.CallBool( this );
        }        
        
        public bool IsReadOnly()
        {
            return _cmj_fun25.CallBool( this );
        }        
        
        public bool IsValid(int timeout)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 1 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(timeout) )
            {
                return _cmj_fun26.CallBool( this, cmj_jmargs );
            }
        }        
        
        public string NativeSQL(string sql)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 1 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(sql) )
            {
                return _cmj_fun27.CallString( this, cmj_jmargs );
            }
        }        
        
        public global::Java.Sql.CallableStatement PrepareCall(string sql)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 1 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(sql) )
            {
                if(_cmj_fun28.IsLeafType)
                {
                    long    jnet_ref = (long)_cmj_fun28.CallObject( this, cmj_jmargs );
                    return  jnet_ref == 0 ? null : new global::Java.Sql.CallableStatementImpl( new global::Codemesh.JuggerNET.JNIHandle(jnet_ref) );
                }
                else
                    return (global::Java.Sql.CallableStatement)_cmj_fun28.CallObject( this, typeof(global::Java.Sql.CallableStatement), false, cmj_jmargs );
        
            }
        }        
        
        public global::Java.Sql.CallableStatement PrepareCall(string sql, int resultSetType, int resultSetConcurrency)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 3 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(sql).Add(resultSetType).Add(resultSetConcurrency) )
            {
                if(_cmj_fun29.IsLeafType)
                {
                    long    jnet_ref = (long)_cmj_fun29.CallObject( this, cmj_jmargs );
                    return  jnet_ref == 0 ? null : new global::Java.Sql.CallableStatementImpl( new global::Codemesh.JuggerNET.JNIHandle(jnet_ref) );
                }
                else
                    return (global::Java.Sql.CallableStatement)_cmj_fun29.CallObject( this, typeof(global::Java.Sql.CallableStatement), false, cmj_jmargs );
        
            }
        }        
        
        public global::Java.Sql.CallableStatement PrepareCall(string sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 4 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(sql).Add(resultSetType).Add(resultSetConcurrency).Add(resultSetHoldability) )
            {
                if(_cmj_fun30.IsLeafType)
                {
                    long    jnet_ref = (long)_cmj_fun30.CallObject( this, cmj_jmargs );
                    return  jnet_ref == 0 ? null : new global::Java.Sql.CallableStatementImpl( new global::Codemesh.JuggerNET.JNIHandle(jnet_ref) );
                }
                else
                    return (global::Java.Sql.CallableStatement)_cmj_fun30.CallObject( this, typeof(global::Java.Sql.CallableStatement), false, cmj_jmargs );
        
            }
        }        
        
        public global::Java.Sql.PreparedStatement PrepareStatement(string sql)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 1 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(sql) )
            {
                if(_cmj_fun31.IsLeafType)
                {
                    long    jnet_ref = (long)_cmj_fun31.CallObject( this, cmj_jmargs );
                    return  jnet_ref == 0 ? null : new global::Java.Sql.PreparedStatementImpl( new global::Codemesh.JuggerNET.JNIHandle(jnet_ref) );
                }
                else
                    return (global::Java.Sql.PreparedStatement)_cmj_fun31.CallObject( this, typeof(global::Java.Sql.PreparedStatement), false, cmj_jmargs );
        
            }
        }        
        
        public global::Java.Sql.PreparedStatement PrepareStatement(string sql, int autoGeneratedKeys)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 2 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(sql).Add(autoGeneratedKeys) )
            {
                if(_cmj_fun32.IsLeafType)
                {
                    long    jnet_ref = (long)_cmj_fun32.CallObject( this, cmj_jmargs );
                    return  jnet_ref == 0 ? null : new global::Java.Sql.PreparedStatementImpl( new global::Codemesh.JuggerNET.JNIHandle(jnet_ref) );
                }
                else
                    return (global::Java.Sql.PreparedStatement)_cmj_fun32.CallObject( this, typeof(global::Java.Sql.PreparedStatement), false, cmj_jmargs );
        
            }
        }        
        
        public global::Java.Sql.PreparedStatement PrepareStatement(string sql, global::Codemesh.JuggerNET.intArray columnIndexes)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 2 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(sql).Add(columnIndexes) )
            {
                if(_cmj_fun33.IsLeafType)
                {
                    long    jnet_ref = (long)_cmj_fun33.CallObject( this, cmj_jmargs );
                    return  jnet_ref == 0 ? null : new global::Java.Sql.PreparedStatementImpl( new global::Codemesh.JuggerNET.JNIHandle(jnet_ref) );
                }
                else
                    return (global::Java.Sql.PreparedStatement)_cmj_fun33.CallObject( this, typeof(global::Java.Sql.PreparedStatement), false, cmj_jmargs );
        
            }
        }        
        
        public global::Java.Sql.PreparedStatement PrepareStatement(string sql, global::Java.Lang.StringArray columnNames)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 2 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(sql).Add(columnNames) )
            {
                if(_cmj_fun34.IsLeafType)
                {
                    long    jnet_ref = (long)_cmj_fun34.CallObject( this, cmj_jmargs );
                    return  jnet_ref == 0 ? null : new global::Java.Sql.PreparedStatementImpl( new global::Codemesh.JuggerNET.JNIHandle(jnet_ref) );
                }
                else
                    return (global::Java.Sql.PreparedStatement)_cmj_fun34.CallObject( this, typeof(global::Java.Sql.PreparedStatement), false, cmj_jmargs );
        
            }
        }        
        
        public global::Java.Sql.PreparedStatement PrepareStatement(string sql, int resultSetType, int resultSetConcurrency)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 3 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(sql).Add(resultSetType).Add(resultSetConcurrency) )
            {
                if(_cmj_fun35.IsLeafType)
                {
                    long    jnet_ref = (long)_cmj_fun35.CallObject( this, cmj_jmargs );
                    return  jnet_ref == 0 ? null : new global::Java.Sql.PreparedStatementImpl( new global::Codemesh.JuggerNET.JNIHandle(jnet_ref) );
                }
                else
                    return (global::Java.Sql.PreparedStatement)_cmj_fun35.CallObject( this, typeof(global::Java.Sql.PreparedStatement), false, cmj_jmargs );
        
            }
        }        
        
        public global::Java.Sql.PreparedStatement PrepareStatement(string sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 4 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(sql).Add(resultSetType).Add(resultSetConcurrency).Add(resultSetHoldability) )
            {
                if(_cmj_fun36.IsLeafType)
                {
                    long    jnet_ref = (long)_cmj_fun36.CallObject( this, cmj_jmargs );
                    return  jnet_ref == 0 ? null : new global::Java.Sql.PreparedStatementImpl( new global::Codemesh.JuggerNET.JNIHandle(jnet_ref) );
                }
                else
                    return (global::Java.Sql.PreparedStatement)_cmj_fun36.CallObject( this, typeof(global::Java.Sql.PreparedStatement), false, cmj_jmargs );
        
            }
        }        
        
        public void ReleaseSavepoint(global::Java.Sql.Savepoint savepoint)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 1 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(savepoint) )
            {
                _cmj_fun37.CallVoid( this, cmj_jmargs );
            }
        }        
        
        public void Rollback()
        {
            _cmj_fun38.CallVoid( this );
        }        
        
        public void Rollback(global::Java.Sql.Savepoint savepoint)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 1 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(savepoint) )
            {
                _cmj_fun39.CallVoid( this, cmj_jmargs );
            }
        }        
        
        public void SetAutoCommit(bool autoCommit)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 1 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(autoCommit) )
            {
                _cmj_fun40.CallVoid( this, cmj_jmargs );
            }
        }        
        
        public void SetCatalog(string catalog)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 1 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(catalog) )
            {
                _cmj_fun41.CallVoid( this, cmj_jmargs );
            }
        }        
        
        public void SetClientInfo(global::Java.Util.Properties properties)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 1 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(properties) )
            {
                _cmj_fun42.CallVoid( this, cmj_jmargs );
            }
        }        
        
        public void SetClientInfo(string name, string value)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 2 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(name).Add(value) )
            {
                _cmj_fun43.CallVoid( this, cmj_jmargs );
            }
        }        
        
        public void SetHoldability(int holdability)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 1 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(holdability) )
            {
                _cmj_fun44.CallVoid( this, cmj_jmargs );
            }
        }        
        
        public void SetNetworkTimeout(global::Java.Util.Concurrent.Executor executor, int milliseconds)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 2 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(executor).Add(milliseconds) )
            {
                _cmj_fun45.CallVoid( this, cmj_jmargs );
            }
        }        
        
        public void SetReadOnly(bool readOnly)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 1 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(readOnly) )
            {
                _cmj_fun46.CallVoid( this, cmj_jmargs );
            }
        }        
        
        public global::Java.Sql.Savepoint SetSavepoint()
        {
            if(_cmj_fun47.IsLeafType)
            {
                long    jnet_ref = (long)_cmj_fun47.CallObject( this );
                return  jnet_ref == 0 ? null : new global::Java.Sql.SavepointImpl( new global::Codemesh.JuggerNET.JNIHandle(jnet_ref) );
            }
            else
                return (global::Java.Sql.Savepoint)_cmj_fun47.CallObject( this, typeof(global::Java.Sql.Savepoint), false );
        
        }        
        
        public global::Java.Sql.Savepoint SetSavepoint(string name)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 1 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(name) )
            {
                if(_cmj_fun48.IsLeafType)
                {
                    long    jnet_ref = (long)_cmj_fun48.CallObject( this, cmj_jmargs );
                    return  jnet_ref == 0 ? null : new global::Java.Sql.SavepointImpl( new global::Codemesh.JuggerNET.JNIHandle(jnet_ref) );
                }
                else
                    return (global::Java.Sql.Savepoint)_cmj_fun48.CallObject( this, typeof(global::Java.Sql.Savepoint), false, cmj_jmargs );
        
            }
        }        
        
        public void SetSchema(string schema)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 1 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(schema) )
            {
                _cmj_fun49.CallVoid( this, cmj_jmargs );
            }
        }        
        
        public void SetTransactionIsolation(int level)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 1 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(level) )
            {
                _cmj_fun50.CallVoid( this, cmj_jmargs );
            }
        }        
        
        public void SetTypeMap(global::Java.Util.Map map)
        {
            global::Codemesh.JuggerNET.jvalue[]   cmj_jargs = new global::Codemesh.JuggerNET.jvalue[ 1 ];
            using( global::Codemesh.JuggerNET.JavaMethodArguments cmj_jmargs = new global::Codemesh.JuggerNET.JavaMethodArguments( cmj_jargs ).Add(map) )
            {
                _cmj_fun51.CallVoid( this, cmj_jmargs );
            }
        }        
    }    
    

}
